import os
import whisper
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
MODEL_TYPE = "tiny"  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "small" –µ—Å–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
model = whisper.load_model(MODEL_TYPE)

async def transcribe_audio(file_path):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper"""
    result = model.transcribe(file_path)
    segments = result["segments"]
    return "\n".join(
        [f"{round(seg['start'], 2)}s - {round(seg['end'], 2)}s: {seg['text']}" 
         for seg in segments]
    )

@dp.message(CommandStart())
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª "
        "(.m4a, .mp3, .wav –∏ –¥—Ä.), –∏ —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –µ–≥–æ."
    )

@dp.message(F.voice | F.audio | F.document)
async def handle_media(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    try:
        if message.voice:
            file_id = message.voice.file_id
            filename = "voice.ogg"
        elif message.audio:
            file_id = message.audio.file_id
            filename = message.audio.file_name or "audio.mp3"
        else:
            file_id = message.document.file_id
            filename = message.document.file_name or "audio.m4a"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_id)
        file_path = await bot.download_file(file.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(filename, "wb") as f:
            f.write(file_path.read())

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        transcription = await transcribe_audio(filename)
        await message.answer(f"üîä *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:*\n{transcription}")

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if os.path.exists(filename):
            os.remove(filename)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤"""
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

if __name__ == '__main__':
    asyncio.run(main())
